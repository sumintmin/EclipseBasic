package kr.or.ddit.study07.shape;

public abstract class Shape {
//	public class Shape {
//	public void draw() {
//		
//	}
//	// shapemain에서 생성자 호출 시 자동으로 오버라이드 코드가 뜸
	// draw가 완성이 안되어서..
	public abstract void draw();
	
	
	// 인터페이스와 추상클래스가 필요한 이유
	// 상급자가 설계를 하고 인터페이스 바탕으로 개발을 하게 될 거다.
	// ex
	// 회원가입
	
	// (일반적인 구조)
	// html 입력창이 필요
	// 요 데이터를 java로 넘김
	// db로 넘김
	
	// 입력 id, name
	// 인터페이스로 설계하면 5가지?
	// run이라는 메소드에 타입을 다 적어줌 id, name ,pw etc
	// 입력하는 만드는 개발자는 인터페이스 보고 요공고ㅗ 만들어주고
	// 이렇게 넘겨줄거니 이거보고 개발하면 되겠다.
	
	// 인터페이스는 개발자들끼리 약속할 수 있는 소통도구가 되기 도 한다.
	// 분업하게 됨.
	// 인터페이스를 미리 하면 같이 개발..
	// main기능 개발 시 안에 뭐가 들어있는지 알 필요가 없다.
	// 뭘 완성할진 관심x 메인 만들고 있으면 됨.
	// 내가 받을 건 move 와 attack이니 그것만 잘 구현하면됨
	
	// 자바협업이 잘 되는 이유가 인터페이스이다.
	// 추상클래스는 조금 완성하고 보낼 수 있고
	// 인터페이스는 설계만 함..
	
	
	
}
